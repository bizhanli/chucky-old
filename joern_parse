#!/usr/bin/env python2

import argparse

import sourceutils.codeTree.create as codeTreeCreate
import sourceutils.csvASTs.create as csvASTCreate
import sourceutils.pythonASTs.create as pythonASTCreate
import sourceutils.pythonCFGs.create as pythonCFGCreate
import sourceutils.functionASTs.create as functionASTCreate

class CLI():
    def __init__(self):
        self.initializeOptParser()
        self.parseCommandLine()
    
    def initializeOptParser(self):
        self.argParser = argparse.ArgumentParser(description = "Parses source code and creates abstract syntax trees for all source files and control flow graphs for all functions.")
        self.argParser.add_argument("sourcedir", help="directory containing the source code to parse")
        self.argParser.add_argument("--output-dir", help="output directory")
        self.argParser.add_argument('-d', '--dont-enter', nargs='+', type=str, default = [])
        
    def parseCommandLine(self):
        self.args = self.argParser.parse_args()
    
    def codeDirToOutputDir(self, codeDir):
        outputDir = codeDir
        if codeDir[-1] == '/':
            outputDir = outputDir[:-1]
        outputDir = '.' + outputDir.split('/')[-1]
        return outputDir
    
    def run(self):
        codeDir = self.args.sourcedir
        if self.args.output_dir != None:
            outputDir = self.args.output_dir
        else:
            outputDir = self.codeDirToOutputDir(codeDir)
        
        dirsNotToEnter = self.args.dont_enter
        
        print 'Parsing source files in: %s' % (codeDir)
        
        codeTreeCreate.main(codeDir, dirsNotToEnter)
        csvASTCreate.main(outputDir)
        pythonASTCreate.main(outputDir)
        # pythonCFGCreate.main(outputDir)
        functionASTCreate.main(outputDir)
        
        
if __name__ == '__main__':
    cli = CLI()
    cli.run()